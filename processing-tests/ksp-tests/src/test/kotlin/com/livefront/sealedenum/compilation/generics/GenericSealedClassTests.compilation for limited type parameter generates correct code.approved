package com.livefront.sealedenum.compilation.generics

import com.livefront.sealedenum.EnumForSealedEnumProvider
import com.livefront.sealedenum.SealedEnum
import com.livefront.sealedenum.SealedEnumWithEnumProvider
import kotlin.Int
import kotlin.LazyThreadSafetyMode
import kotlin.String
import kotlin.collections.List
import kotlin.reflect.KClass

/**
 * An isomorphic enum for the sealed class [LimitedTypeParameterSealedClass]
 */
public enum class LimitedTypeParameterSealedClassEnum() {
    LimitedTypeParameterSealedClass_FirstObject,
    LimitedTypeParameterSealedClass_SecondObject,
}

/**
 * The isomorphic [LimitedTypeParameterSealedClassEnum] for [this].
 */
public val LimitedTypeParameterSealedClass<*, *>.`enum`: LimitedTypeParameterSealedClassEnum
    get() = LimitedTypeParameterSealedClassSealedEnum.sealedObjectToEnum(this)

/**
 * The isomorphic [LimitedTypeParameterSealedClass] for [this].
 */
public val LimitedTypeParameterSealedClassEnum.sealedObject: LimitedTypeParameterSealedClass<*, *>
    get() = LimitedTypeParameterSealedClassSealedEnum.enumToSealedObject(this)

/**
 * An implementation of [SealedEnum] for the sealed class [LimitedTypeParameterSealedClass]
 */
public object LimitedTypeParameterSealedClassSealedEnum :
        SealedEnum<LimitedTypeParameterSealedClass<*, *>>,
        SealedEnumWithEnumProvider<LimitedTypeParameterSealedClass<*, *>, LimitedTypeParameterSealedClassEnum>,
        EnumForSealedEnumProvider<LimitedTypeParameterSealedClass<*, *>, LimitedTypeParameterSealedClassEnum>
        {
    public override val values: List<LimitedTypeParameterSealedClass<*, *>> by lazy(mode =
            LazyThreadSafetyMode.PUBLICATION) {
        listOf(
            LimitedTypeParameterSealedClass.FirstObject,
            LimitedTypeParameterSealedClass.SecondObject
        )
    }


    public override val enumClass: KClass<LimitedTypeParameterSealedClassEnum>
        get() = LimitedTypeParameterSealedClassEnum::class

    public override fun ordinalOf(obj: LimitedTypeParameterSealedClass<*, *>): Int = when (obj) {
        is LimitedTypeParameterSealedClass.FirstObject -> 0
        is LimitedTypeParameterSealedClass.SecondObject -> 1
    }

    public override fun nameOf(obj: LimitedTypeParameterSealedClass<*, *>): String = when (obj) {
        is LimitedTypeParameterSealedClass.FirstObject ->
                "LimitedTypeParameterSealedClass_FirstObject"
        is LimitedTypeParameterSealedClass.SecondObject ->
                "LimitedTypeParameterSealedClass_SecondObject"
    }

    public override fun valueOf(name: String): LimitedTypeParameterSealedClass<*, *> = when (name) {
        "LimitedTypeParameterSealedClass_FirstObject" -> LimitedTypeParameterSealedClass.FirstObject
        "LimitedTypeParameterSealedClass_SecondObject" ->
                LimitedTypeParameterSealedClass.SecondObject
        else -> throw IllegalArgumentException("""No sealed enum constant $name""")
    }

    public override fun sealedObjectToEnum(obj: LimitedTypeParameterSealedClass<*, *>):
            LimitedTypeParameterSealedClassEnum = when (obj) {
        is LimitedTypeParameterSealedClass.FirstObject ->
                LimitedTypeParameterSealedClassEnum.LimitedTypeParameterSealedClass_FirstObject
        is LimitedTypeParameterSealedClass.SecondObject ->
                LimitedTypeParameterSealedClassEnum.LimitedTypeParameterSealedClass_SecondObject
    }

    public override fun enumToSealedObject(`enum`: LimitedTypeParameterSealedClassEnum):
            LimitedTypeParameterSealedClass<*, *> = when (enum) {
        LimitedTypeParameterSealedClassEnum.LimitedTypeParameterSealedClass_FirstObject ->
                LimitedTypeParameterSealedClass.FirstObject
        LimitedTypeParameterSealedClassEnum.LimitedTypeParameterSealedClass_SecondObject ->
                LimitedTypeParameterSealedClass.SecondObject
    }
}

/**
 * The index of [this] in the values list.
 */
public val LimitedTypeParameterSealedClass<*, *>.ordinal: Int
    get() = LimitedTypeParameterSealedClassSealedEnum.ordinalOf(this)

/**
 * The name of [this] for use with valueOf.
 */
public val LimitedTypeParameterSealedClass<*, *>.name: String
    get() = LimitedTypeParameterSealedClassSealedEnum.nameOf(this)

/**
 * A list of all [LimitedTypeParameterSealedClass] objects.
 */
public val LimitedTypeParameterSealedClass.LimitedType.values:
        List<LimitedTypeParameterSealedClass<*, *>>
    get() = LimitedTypeParameterSealedClassSealedEnum.values

/**
 * Returns an implementation of [SealedEnum] for the sealed class [LimitedTypeParameterSealedClass]
 */
public val LimitedTypeParameterSealedClass.LimitedType.sealedEnum:
        LimitedTypeParameterSealedClassSealedEnum
    get() = LimitedTypeParameterSealedClassSealedEnum

/**
 * Returns the [LimitedTypeParameterSealedClass] object for the given [name].
 *
 * If the given name doesn't correspond to any [LimitedTypeParameterSealedClass], an
 * [IllegalArgumentException] will be thrown.
 */
public fun LimitedTypeParameterSealedClass.LimitedType.valueOf(name: String):
        LimitedTypeParameterSealedClass<*, *> =
        LimitedTypeParameterSealedClassSealedEnum.valueOf(name)
