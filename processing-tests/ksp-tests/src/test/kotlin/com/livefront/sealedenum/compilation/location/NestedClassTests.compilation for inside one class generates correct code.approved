package com.livefront.sealedenum.compilation.location

import com.livefront.sealedenum.SealedEnum
import kotlin.Int
import kotlin.LazyThreadSafetyMode
import kotlin.String
import kotlin.collections.List

/**
 * An implementation of [SealedEnum] for the sealed class [OuterClass.InsideOneClassSealedClass]
 */
public object OuterClass_InsideOneClassSealedClassSealedEnum :
        SealedEnum<OuterClass.InsideOneClassSealedClass> {
    public override val values: List<OuterClass.InsideOneClassSealedClass> by lazy(mode =
            LazyThreadSafetyMode.PUBLICATION) {
        listOf(
            OuterClass.InsideOneClassSealedClass.FirstObject,
            OuterClass.InsideOneClassSealedClass.SecondObject
        )
    }


    public override fun ordinalOf(obj: OuterClass.InsideOneClassSealedClass): Int = when (obj) {
        is OuterClass.InsideOneClassSealedClass.FirstObject -> 0
        is OuterClass.InsideOneClassSealedClass.SecondObject -> 1
    }

    public override fun nameOf(obj: OuterClass.InsideOneClassSealedClass): String = when (obj) {
        is OuterClass.InsideOneClassSealedClass.FirstObject ->
                "OuterClass_InsideOneClassSealedClass_FirstObject"
        is OuterClass.InsideOneClassSealedClass.SecondObject ->
                "OuterClass_InsideOneClassSealedClass_SecondObject"
    }

    public override fun valueOf(name: String): OuterClass.InsideOneClassSealedClass = when (name) {
        "OuterClass_InsideOneClassSealedClass_FirstObject" ->
                OuterClass.InsideOneClassSealedClass.FirstObject
        "OuterClass_InsideOneClassSealedClass_SecondObject" ->
                OuterClass.InsideOneClassSealedClass.SecondObject
        else -> throw IllegalArgumentException("""No sealed enum constant $name""")
    }
}

/**
 * The index of [this] in the values list.
 */
public val OuterClass.InsideOneClassSealedClass.ordinal: Int
    get() = OuterClass_InsideOneClassSealedClassSealedEnum.ordinalOf(this)

/**
 * The name of [this] for use with valueOf.
 */
public val OuterClass.InsideOneClassSealedClass.name: String
    get() = OuterClass_InsideOneClassSealedClassSealedEnum.nameOf(this)

/**
 * A list of all [OuterClass.InsideOneClassSealedClass] objects.
 */
public val OuterClass.InsideOneClassSealedClass.Companion.values:
        List<OuterClass.InsideOneClassSealedClass>
    get() = OuterClass_InsideOneClassSealedClassSealedEnum.values

/**
 * Returns an implementation of [SealedEnum] for the sealed class
 * [OuterClass.InsideOneClassSealedClass]
 */
public val OuterClass.InsideOneClassSealedClass.Companion.sealedEnum:
        OuterClass_InsideOneClassSealedClassSealedEnum
    get() = OuterClass_InsideOneClassSealedClassSealedEnum

/**
 * Returns the [OuterClass.InsideOneClassSealedClass] object for the given [name].
 *
 * If the given name doesn't correspond to any [OuterClass.InsideOneClassSealedClass], an
 * [IllegalArgumentException] will be thrown.
 */
public fun OuterClass.InsideOneClassSealedClass.Companion.valueOf(name: String):
        OuterClass.InsideOneClassSealedClass =
        OuterClass_InsideOneClassSealedClassSealedEnum.valueOf(name)
